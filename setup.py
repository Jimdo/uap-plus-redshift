#!/usr/bin/env python
import os
from distutils import log
from setuptools import setup
from setuptools.command.develop import develop as _develop
from setuptools.command.sdist import sdist as _sdist

def force_bytes(text):
    if text is None:
        return text
    return text.encode("utf8")

def install_regexes():
    import yaml

    cwd = os.path.abspath(os.path.dirname(__file__))
    yaml_src = os.path.join(cwd, 'uap-core', 'regexes.yaml')
    py_dest = os.path.join(cwd, "ua_parser_plus", "_regexes.py")

    log.info("compiling regexes.yaml -> _regexes.py")
    with open(yaml_src, "rb") as fp:
        regexes = yaml.safe_load(fp)
    with open(py_dest, "wb") as fp:
        # fmt: off
        fp.write(b"# -*- coding: utf-8 -*-\n")
        fp.write(b"############################################\n")
        fp.write(b"# NOTICE: This file is autogenerated from  #\n")
        fp.write(b"# regexes.yaml. Do not edit by hand,       #\n")
        fp.write(b"# instead, re-run `setup.py build_regexes` #\n")
        fp.write(b"############################################\n")
        fp.write(b"\n")
        fp.write(b"from __future__ import absolute_import, unicode_literals\n")
        fp.write(b"from .user_agent_parser import (\n")
        fp.write(b"    UserAgentParser, DeviceParser, OSParser,\n")
        fp.write(b")\n")
        fp.write(b"\n")
        fp.write(b"__all__ = (\n")
        fp.write(b"    'USER_AGENT_PARSERS', 'DEVICE_PARSERS', 'OS_PARSERS',\n")
        fp.write(b")\n")
        fp.write(b"\n")
        fp.write(b"USER_AGENT_PARSERS = [\n")
        for device_parser in regexes["user_agent_parsers"]:
            fp.write(b"    UserAgentParser(\n")
            fp.write(force_bytes("        %r,\n" % device_parser["regex"]))
            fp.write(force_bytes("        %r,\n" % device_parser.get("family_replacement")))
            fp.write(force_bytes("        %r,\n" % device_parser.get("v1_replacement")))
            fp.write(force_bytes("        %r,\n" % device_parser.get("v2_replacement")))
            fp.write(b"    ),\n")
        fp.write(b"]\n")
        fp.write(b"\n")
        fp.write(b"DEVICE_PARSERS = [\n")
        for device_parser in regexes["device_parsers"]:
            fp.write(b"    DeviceParser(\n")
            fp.write(force_bytes("        %r,\n" % device_parser["regex"]))
            fp.write(force_bytes("        %r,\n" % device_parser.get("regex_flag")))
            fp.write(force_bytes("        %r,\n" % device_parser.get("device_replacement")))
            fp.write(force_bytes("        %r,\n" % device_parser.get("brand_replacement")))
            fp.write(force_bytes("        %r,\n" % device_parser.get("model_replacement")))
            fp.write(b"    ),\n")
        fp.write(b"]\n")
        fp.write(b"\n")
        fp.write(b"OS_PARSERS = [\n")
        for device_parser in regexes["os_parsers"]:
            fp.write(b"    OSParser(\n")
            fp.write(force_bytes("        %r,\n" % device_parser["regex"]))
            fp.write(force_bytes("        %r,\n" % device_parser.get("os_replacement")))
            fp.write(force_bytes("        %r,\n" % device_parser.get("os_v1_replacement")))
            fp.write(force_bytes("        %r,\n" % device_parser.get("os_v2_replacement")))
            fp.write(force_bytes("        %r,\n" % device_parser.get("os_v3_replacement")))
            fp.write(force_bytes("        %r,\n" % device_parser.get("os_v4_replacement")))
            fp.write(b"    ),\n")
        fp.write(b"]\n")

class develop(_develop):
    def run(self):
        install_regexes()
        _develop.run(self)


class sdist(_sdist):
    def run(self):
        install_regexes()
        _sdist.run(self)


setup(
    name='ua-parser-plus',
    version='1.0.0',
    description="Python port of Browserscope's user agent parser",
    author='PBS',
    author_email='no-reply@pbs.org',
    packages=['ua_parser_plus'],
    package_dir={'': '.'},
    license='LICENSE.txt',
    zip_safe=False,
    url='https://github.com/ua-parser/uap-python',
    include_package_data=True,
    package_data={'ua_parser_plus': ['regexes.yaml', 'regexes.json']},
    install_requires=['pyyaml'],
    cmdclass={
        'develop': develop,
        'sdist': sdist,
    },
    classifiers=[
        'Development Status :: 4 - Beta',
        'Environment :: Web Environment',
        'Intended Audience :: Developers',
        'Operating System :: OS Independent',
        'License :: OSI Approved :: Apache Software License',
        'Programming Language :: Python',
        'Topic :: Internet :: WWW/HTTP',
        'Topic :: Software Development :: Libraries :: Python Modules',
        'Programming Language :: Python',
        'Programming Language :: Python :: 2',
        'Programming Language :: Python :: 2.6',
        'Programming Language :: Python :: 2.7',
        'Programming Language :: Python :: 3',
        'Programming Language :: Python :: 3.3',
        'Programming Language :: Python :: 3.4',
        'Programming Language :: Python :: Implementation :: CPython',
        'Programming Language :: Python :: Implementation :: PyPy',
    ],
)
